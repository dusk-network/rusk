syntax = "proto3";
package rusk;
option go_package = "github.com/dusk-network/rusk-schema;rusk";

import "keys.proto";

message Crossover {
    bytes value_commitment = 1; // JubJubCompressed
    bytes nonce = 2; // JubJubScalar
    bytes encrypted_data = 3;
}
message Fee {
    uint64 gas_limit = 1;
    uint64 gas_price = 2;
    StealthAddress stealth_address = 3;
}

message Note {
    enum NoteType {
        TRANSPARENT = 0;
        OBFUSCATED = 1;
    }

    NoteType note_type = 1;
    bytes value_commitment = 2; // JubJubCompressed
    bytes nonce = 3; // JubJubScalar
    StealthAddress stealth_address = 4;
    fixed64 pos = 5;
    bytes encrypted_data = 6;
}

message Transaction {
    uint32 version = 1;
    uint32 type = 2;
    bytes payload = 3;
}

message TransactionRequest {
    bytes contract_address = 1;
    uint32 op_code = 2;
    bytes arguments = 3;
    Fee fee = 4;
}

service TransactionService {
    // A generic method to create a transaction which requires
    // no special fields (no crossover, outputs, or specific proofs).
    rpc NewTransaction(TransactionRequest) returns (Transaction) {}
}
