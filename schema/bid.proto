syntax = "proto3";
package rusk;
option go_package = "github.com/dusk-network/rusk-schema;rusk";

import "transaction.proto";
import "keys.proto";

// Bid representation
message Bid {
    bytes encrypted_data = 1;
    bytes hashed_secret = 2; // BlsScalar
    bytes nonce = 3; // BlsScalar
    StealthAddress stealth_address = 4;
    bytes commitment = 5; // JubJubCompressed
    bytes elegibility = 6; // BlsScalar
    bytes expiration = 7; // BlsScalar
}

// Used to Request the creation of a Bid
message BidTransactionRequest {
    bytes k = 1; // BlsScalar
    uint64 value = 2;
    bytes secret = 3; // JubJubCompressed
    StealthAddress stealth_address = 4;
    bytes seed = 5; // BlsScalar
    fixed64 latest_consensus_round = 6;
    fixed64 latest_consensus_step = 7;
    fixed64 gas_limit = 8;
    fixed64 gas_price = 9;
}

message BidTransaction {
    uint64 bid_tree_storage_index = 1;
    Transaction tx = 2;
}

message FindBidRequest {
    StealthAddress stealth_address = 1;
}

message BidList {
    repeated Bid bid_list = 1;
    repeated bytes bid_hash_list = 2; // BlsScalar
}

service BidService {
    // Generate a new Bid and a proof of it's correctness.
    rpc NewBid(BidTransactionRequest) returns (BidTransaction) {}
    // Look for your owned Bids and return a list of them and it's hash repr
    rpc FindBid(FindBidRequest) returns (BidList) {}
}
